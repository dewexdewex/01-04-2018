__d(function (global, _require, module, exports, _dependencyMap) {
  var _react2 = _require(_dependencyMap[0], "react");

  var _react3 = _interopRequireDefault(_react2);

  var _index = _require(_dependencyMap[1], "./../react-transform-hmr/lib/index.js");

  var _index2 = _interopRequireDefault(_index);

  var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

  var _jsxFileName = "/Users/dewex/Documents/apps/D2M/01-04-2018/node_modules/react-native-svg-uri/index.js";

  var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

  var _reactNative = _require(_dependencyMap[2], "react-native");

  var _propTypes = _require(_dependencyMap[3], "prop-types");

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var _xmldom = _require(_dependencyMap[4], "xmldom");

  var _xmldom2 = _interopRequireDefault(_xmldom);

  var _resolveAssetSource = _require(_dependencyMap[5], "react-native/Libraries/Image/resolveAssetSource");

  var _resolveAssetSource2 = _interopRequireDefault(_resolveAssetSource);

  var _reactNativeSvg = _require(_dependencyMap[6], "react-native-svg");

  var _reactNativeSvg2 = _interopRequireDefault(_reactNativeSvg);

  var _utils = _require(_dependencyMap[7], "./utils");

  var utils = _interopRequireWildcard(_utils);

  function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

  function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

  function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

  function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

  function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

  var _components = {
    SvgUri: {
      displayName: "SvgUri"
    }
  };

  var _reactTransformHmrLibIndexJs2 = (0, _index2.default)({
    filename: "/Users/dewex/Documents/apps/D2M/01-04-2018/node_modules/react-native-svg-uri/index.js",
    components: _components,
    locals: [module],
    imports: [_react3.default]
  });

  function _wrapComponent(id) {
    return function (Component) {
      return _reactTransformHmrLibIndexJs2(Component, id);
    };
  }

  var ACCEPTED_SVG_ELEMENTS = ['svg', 'g', 'circle', 'path', 'rect', 'defs', 'line', 'linearGradient', 'radialGradient', 'stop', 'ellipse', 'polygon', 'polyline', 'text', 'tspan'];
  var SVG_ATTS = ['viewBox', 'width', 'height'];
  var G_ATTS = ['id'];
  var CIRCLE_ATTS = ['cx', 'cy', 'r'];
  var PATH_ATTS = ['d'];
  var RECT_ATTS = ['width', 'height'];
  var LINE_ATTS = ['x1', 'y1', 'x2', 'y2'];
  var LINEARG_ATTS = LINE_ATTS.concat(['id', 'gradientUnits']);
  var RADIALG_ATTS = CIRCLE_ATTS.concat(['id', 'gradientUnits']);
  var STOP_ATTS = ['offset'];
  var ELLIPSE_ATTS = ['cx', 'cy', 'rx', 'ry'];
  var TEXT_ATTS = ['fontFamily', 'fontSize', 'fontWeight'];
  var POLYGON_ATTS = ['points'];
  var POLYLINE_ATTS = ['points'];
  var COMMON_ATTS = ['fill', 'fillOpacity', 'stroke', 'strokeWidth', 'strokeOpacity', 'opacity', 'strokeLinecap', 'strokeLinejoin', 'strokeDasharray', 'strokeDashoffset', 'x', 'y', 'rotate', 'scale', 'origin', 'originX', 'originY'];
  var ind = 0;

  function fixYPosition(y, node) {
    if (node.attributes) {
      var fontSizeAttr = Object.keys(node.attributes).find(function (a) {
        return node.attributes[a].name === 'font-size';
      });

      if (fontSizeAttr) {
        return '' + (parseFloat(y) - parseFloat(node.attributes[fontSizeAttr].value));
      }
    }

    if (!node.parentNode) {
      return y;
    }

    return fixYPosition(y, node.parentNode);
  }

  var SvgUri = _wrapComponent("SvgUri")(function (_Component) {
    _inherits(SvgUri, _Component);

    function SvgUri(props) {
      _classCallCheck(this, SvgUri);

      var _this = _possibleConstructorReturn(this, (SvgUri.__proto__ || Object.getPrototypeOf(SvgUri)).call(this, props));

      _this.state = {
        fill: props.fill,
        svgXmlData: props.svgXmlData
      };
      _this.createSVGElement = _this.createSVGElement.bind(_this);
      _this.obtainComponentAtts = _this.obtainComponentAtts.bind(_this);
      _this.inspectNode = _this.inspectNode.bind(_this);
      _this.fetchSVGData = _this.fetchSVGData.bind(_this);
      _this.isComponentMounted = false;

      if (props.source) {
        var source = (0, _resolveAssetSource2.default)(props.source) || {};

        _this.fetchSVGData(source.uri);
      }

      return _this;
    }

    _createClass(SvgUri, [{
      key: "componentWillMount",
      value: function componentWillMount() {
        this.isComponentMounted = true;
      }
    }, {
      key: "componentWillReceiveProps",
      value: function componentWillReceiveProps(nextProps) {
        if (nextProps.source) {
          var source = (0, _resolveAssetSource2.default)(nextProps.source) || {};
          var oldSource = (0, _resolveAssetSource2.default)(this.props.source) || {};

          if (source.uri !== oldSource.uri) {
            this.fetchSVGData(source.uri);
          }
        }

        if (nextProps.svgXmlData !== this.props.svgXmlData) {
          this.setState({
            svgXmlData: nextProps.svgXmlData
          });
        }

        if (nextProps.fill !== this.props.fill) {
          this.setState({
            fill: nextProps.fill
          });
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.isComponentMounted = false;
      }
    }, {
      key: "fetchSVGData",
      value: function fetchSVGData(uri) {
        var responseXML, response;
        return regeneratorRuntime.async(function fetchSVGData$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                responseXML = null;
                _context.prev = 1;
                _context.next = 4;
                return regeneratorRuntime.awrap(fetch(uri));

              case 4:
                response = _context.sent;
                _context.next = 7;
                return regeneratorRuntime.awrap(response.text());

              case 7:
                responseXML = _context.sent;
                _context.next = 13;
                break;

              case 10:
                _context.prev = 10;
                _context.t0 = _context["catch"](1);
                console.error("ERROR SVG", _context.t0);

              case 13:
                _context.prev = 13;

                if (this.isComponentMounted) {
                  this.setState({
                    svgXmlData: responseXML
                  });
                }

                return _context.finish(13);

              case 16:
                return _context.abrupt("return", responseXML);

              case 17:
              case "end":
                return _context.stop();
            }
          }
        }, null, this, [[1, 10, 13, 16]]);
      }
    }, {
      key: "trimElementChilden",
      value: function trimElementChilden(children) {
        for (var _iterator = children, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === "function" ? Symbol.iterator : "@@iterator"]();;) {
          if (_isArray) {
            if (_i >= _iterator.length) break;
            child = _iterator[_i++];
          } else {
            _i = _iterator.next();
            if (_i.done) break;
            child = _i.value;
          }

          if (typeof child === 'string') {
            if (child.trim.length === 0) children.splice(children.indexOf(child), 1);
          }
        }
      }
    }, {
      key: "createSVGElement",
      value: function createSVGElement(node, childs) {
        this.trimElementChilden(childs);
        var componentAtts = {};
        var i = ind++;

        switch (node.nodeName) {
          case 'svg':
            componentAtts = this.obtainComponentAtts(node, SVG_ATTS);

            if (this.props.width) {
              componentAtts.width = this.props.width;
            }

            if (this.props.height) {
              componentAtts.height = this.props.height;
            }

            return _react3.default.createElement(
              _reactNativeSvg2.default,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 168
                }
              }),
              childs
            );

          case 'g':
            componentAtts = this.obtainComponentAtts(node, G_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.G,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 171
                }
              }),
              childs
            );

          case 'path':
            componentAtts = this.obtainComponentAtts(node, PATH_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Path,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 174
                }
              }),
              childs
            );

          case 'circle':
            componentAtts = this.obtainComponentAtts(node, CIRCLE_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Circle,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 177
                }
              }),
              childs
            );

          case 'rect':
            componentAtts = this.obtainComponentAtts(node, RECT_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Rect,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 180
                }
              }),
              childs
            );

          case 'line':
            componentAtts = this.obtainComponentAtts(node, LINE_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Line,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 183
                }
              }),
              childs
            );

          case 'defs':
            return _react3.default.createElement(
              _reactNativeSvg.Defs,
              {
                key: i,
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 185
                }
              },
              childs
            );

          case 'linearGradient':
            componentAtts = this.obtainComponentAtts(node, LINEARG_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.LinearGradient,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 188
                }
              }),
              childs
            );

          case 'radialGradient':
            componentAtts = this.obtainComponentAtts(node, RADIALG_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.RadialGradient,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 191
                }
              }),
              childs
            );

          case 'stop':
            componentAtts = this.obtainComponentAtts(node, STOP_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Stop,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 194
                }
              }),
              childs
            );

          case 'ellipse':
            componentAtts = this.obtainComponentAtts(node, ELLIPSE_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Ellipse,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 197
                }
              }),
              childs
            );

          case 'polygon':
            componentAtts = this.obtainComponentAtts(node, POLYGON_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Polygon,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 200
                }
              }),
              childs
            );

          case 'polyline':
            componentAtts = this.obtainComponentAtts(node, POLYLINE_ATTS);
            return _react3.default.createElement(
              _reactNativeSvg.Polyline,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 203
                }
              }),
              childs
            );

          case 'text':
            componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);

            if (componentAtts.y) {
              componentAtts.y = fixYPosition(componentAtts.y, node);
            }

            return _react3.default.createElement(
              _reactNativeSvg.Text,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 209
                }
              }),
              childs
            );

          case 'tspan':
            componentAtts = this.obtainComponentAtts(node, TEXT_ATTS);

            if (componentAtts.y) {
              componentAtts.y = fixYPosition(componentAtts.y, node);
            }

            return _react3.default.createElement(
              _reactNativeSvg.TSpan,
              _extends({
                key: i
              }, componentAtts, {
                __source: {
                  fileName: _jsxFileName,
                  lineNumber: 215
                }
              }),
              childs
            );

          default:
            return null;
        }
      }
    }, {
      key: "obtainComponentAtts",
      value: function obtainComponentAtts(_ref, enabledAttributes) {
        var _this2 = this;

        var attributes = _ref.attributes;
        var styleAtts = {};
        Array.from(attributes).forEach(function (_ref2) {
          var nodeName = _ref2.nodeName,
              nodeValue = _ref2.nodeValue;

          _extends(styleAtts, utils.transformStyle({
            nodeName: nodeName,
            nodeValue: nodeValue,
            fillProp: _this2.state.fill
          }));
        });
        var componentAtts = Array.from(attributes).map(utils.camelCaseNodeName).map(utils.removePixelsFromNodeValue).filter(utils.getEnabledAttributes(enabledAttributes.concat(COMMON_ATTS))).reduce(function (acc, _ref3) {
          var nodeName = _ref3.nodeName,
              nodeValue = _ref3.nodeValue;
          acc[nodeName] = _this2.state.fill && nodeName === 'fill' && nodeValue !== 'none' ? _this2.state.fill : nodeValue;
          return acc;
        }, {});

        _extends(componentAtts, styleAtts);

        return componentAtts;
      }
    }, {
      key: "inspectNode",
      value: function inspectNode(node) {
        if (!ACCEPTED_SVG_ELEMENTS.includes(node.nodeName)) {
          return null;
        }

        var arrayElements = [];

        if (node.childNodes && node.childNodes.length > 0) {
          for (var i = 0; i < node.childNodes.length; i++) {
            var isTextValue = node.childNodes[i].nodeValue;

            if (isTextValue) {
              arrayElements.push(node.childNodes[i].nodeValue);
            } else {
              var nodo = this.inspectNode(node.childNodes[i]);

              if (nodo != null) {
                arrayElements.push(nodo);
              }
            }
          }
        }

        return this.createSVGElement(node, arrayElements);
      }
    }, {
      key: "render",
      value: function render() {
        try {
          if (this.state.svgXmlData == null) {
            return null;
          }

          var inputSVG = this.state.svgXmlData.substring(this.state.svgXmlData.indexOf("<svg "), this.state.svgXmlData.indexOf("</svg>") + 6);
          var doc = new _xmldom2.default.DOMParser().parseFromString(inputSVG);
          var rootSVG = this.inspectNode(doc.childNodes[0]);
          return _react3.default.createElement(
            _reactNative.View,
            {
              style: this.props.style,
              __source: {
                fileName: _jsxFileName,
                lineNumber: 288
              }
            },
            rootSVG
          );
        } catch (e) {
          console.error("ERROR SVG", e);
          return null;
        }
      }
    }]);

    return SvgUri;
  }(_react2.Component));

  SvgUri.propTypes = {
    style: _propTypes2.default.object,
    width: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    height: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    svgXmlData: _propTypes2.default.string,
    source: _propTypes2.default.any,
    fill: _propTypes2.default.string
  };
  module.exports = SvgUri;
});